// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows_for_user.sql

package database

import (
	"context"
)

const feedFollowsForUser = `-- name: FeedFollowsForUser :many
SELECT feeds.name AS feed_name, feeds.url, fu.name AS user_name
FROM feed_follows
INNER JOIN users ffu ON feed_follows.user_id = ffu.id
INNER JOIN feeds ON feed_follows.feed_id = feeds.id
INNER JOIN users fu ON feeds.user_id = fu.id
WHERE ffu.name = $1
`

type FeedFollowsForUserRow struct {
	FeedName string
	Url      string
	UserName string
}

func (q *Queries) FeedFollowsForUser(ctx context.Context, name string) ([]FeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, feedFollowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollowsForUserRow
	for rows.Next() {
		var i FeedFollowsForUserRow
		if err := rows.Scan(&i.FeedName, &i.Url, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
